package com.example.myapplication


fun task1(number: Int) : Int{
    return if (number in 10..99) number
    else 0
}
fun printArray(array:Array<Int>){
    println(array.joinToString())
}
fun Array<Int>.filterAndMap(filter: (Int) -> Boolean, map: (Int) -> Int): Array<Int>{
    return this.filter(filter).map(map).toTypedArray()
}


fun main(){
//    Задание 1 – Простые функции. Это задание подразумевает создание простой функции (ключевое слово fun).
//    Обозначьте наименование функции как fun task1(…
//    4.Написать функцию. Входящий параметр (number) – целочисленная переменная.
//    Действие функции – если number двузначное число (от 10 до 99), то вернуть number, иначе вернуть нуль.
    println("ЗАДАНИЕ 1")
    print("Введите число: ")
    val numberFirstTask = readln().toInt()
    println("Вернуло: ${task1(numberFirstTask)}")





//    Задание 2 – Лямбда-выражения. Это задание подразумевает создание лямбда-выражение.
//    Обозначьте наименование этой лямбды как val task2: ….
//    4.Написать лямбда-выражение. Входящий параметр Int.
//    Выходящий Boolean. Действие лямбды – если входящий параметр делится на 10 без остатка, вернуть true, иначе вернуть false.
    println("\n\nЗАДАНИЕ 2")
    print("Введите число: ")
    val numberSecondTask = readln().toInt()
    val task2: (Int) -> Boolean = {
            o1 ->
        o1 % 10 == 0
    }
    println("Вернуло: ${task2(numberSecondTask)}")






//    Задание 3 – Использование функций и лямбда-выражений.
//    Описать функцию main(), в которой будем пробовать использовать написанные ранее две функции – простую функцию и лямбду.
    println("\n\nЗАДАНИЕ 3")
    print("Введите размерность массива: ")
    val n = readln().toInt()
    val array = Array(n) { (-100..500).random() }
    println("Начальный массив:")
    printArray(array)

    val arrayTask1 = array.map(::task1)
    println("Массив после map:")
    println(arrayTask1)

    val arrayTask2 = array.filter(task2)
    println("Массив после filter:")
    println(arrayTask2)




    //Задание 4 – Функции высокого порядка. Функции расширения.
    println("\n\nЗАДАНИЕ 4")
    printArray(array.filterAndMap(task2,::task1))
}

//    Задание 5 – Понимание типов данных функций
//    В коде, с помощью комментария, укажите, что это задание номер 5. Ответы также пишите в виде комментариев.
//    Задание заключается в том, чтобы написать, каким типом данных будет являться его словесный эквивалент.
//    Например: «Тип данных для функции, принимающий Int, и ничего не возвращающий» это будет (Int) -> Unit.
//
//    1.	Тип данных для функции, принимающий две Int, одну String переменные, и ничего не возвращающей.
//    Это будет (Int, Int, String) -> Unit
//    2.	Тип данных для функции, не принимающей параметры, и возвращающей строку.
//    Это будет () -> String
//    3.	Тип данных для функции, принимающей другую функцию (она ничего не принимает и ничего не возвращает), и ничего не возвращающей.
//    Это будет (fun: () -> Unit) -> Unit